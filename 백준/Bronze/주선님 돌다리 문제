dynamic programming, DP
동적계획법(다이나믹 프로그래밍) 이란, 복잡한 문제를 간단한 여러 개의 문제로 나누어 푸는 방법을 말한다. 이것은 부분 문제 반복과 최적 부분 구조를 가지고 있는 알고리즘을 일반적인 방법에 비해 더욱 적은 시간을 내어 풀 때 사용한다. - Wikipedia

  ▷ 코딩테스트에서의 DP
  코딩테스트의 단골 문제로 출제되고 있기에 필수적으로 알아야하는 개념 중 하나이다. 간혹 제약사항에 주어지는 숫자의 범위가 크고, 경우의 수가 엄청 많은 문제들이 대부분 DP(동적계획법) 을 활용하여 풀어야 하는 문제이다.

동적 계획법을 적용하기 위해서는 위 정의에서 본 것처럼, 두 가지 속성을 만족시켜야 한다.
1. 부분 반복 문제 (Overlapping Subproblem)
2. 최적 부분 구조 (Optimal Substructure)

DP를 활용하여 문제 풀이
설명
철수는 학교에 가는데 개울을 만났습니다. 개울은 N개의 돌로 다리를 만들어 놓았습니다.
철수는 돌 다리를 건널 때 한 번에 한 칸 또는 두 칸씩 건너뛰면서 돌다리를 건널 수 있습니다.
철수가 개울을 건너는 방법은 몇 가지일까요?
입력
첫째 줄은 돌의 개수인 자연수 N(3≤N≤35)이 주어집니다.
출력
첫 번째 줄에 개울을 건너는 방법의 수를 출력합니다.

돌다리를 건너는 방법은 
1번 - 1가지(1칸)
2번 - 2가지(1+1칸, 2칸)
3번 - 3가지(1번에서 2칸 건너서, 2번에서 1칸 건너서)

점화식
D(n) = D(n-2) + D(n-1) 
을 구할 수 있다.
  

import java.util.Scanner;

public class stonebridge {

    static int[] dp;
    public int solution(int N) {
        dp[1] = 1;  // 첫 번째 돌다리에 도착하는 경우의 수
        dp[2] = 2;  // 두 번째 돌다리에 도착하는 경우의 수

        for (int i=3; i<=N+1; i++) {    // n번째가 아닌 n+1까지 경우의 수를 구하고 dp[n+1]의 값이 돌다리는 건너는 모든 경우의 수이다.
            dp[i] = dp[i-2] + dp[i-1];
        }
        return dp[N+1];
    }

    public static void main(String[] args) {
    	stonebridge T = new stonebridge();
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        dp = new int[N+2];  // 1은 인덱스이므로 증가시키고 나머지 1은 돌다리를 지난다는 조건이니깐 +1만큼 더 길이를 늘려야한다.
        System.out.println(T.solution(N));
    }
}







  
 

 
  
